{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Settings from \"../constants/Settings\";\nimport { RoiDeletePerson, RoiGetPeople } from \"../utils/RoiApi\";\nimport { PopupOk, PopupOkCancel } from \"../utils/Popup\";\nimport { ButtonContainer } from \"../components/ButtonContainer\";\nimport NetInfo from '@react-native-community/netinfo';\nimport { TextParagraph, TextH1, TextH2 } from \"../components/StyledText\";\nimport Styles from \"../styles/MainStyle\";\nimport { MyButton } from \"../components/MyButton\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function ViewPeopleScreen(props) {\n  var _React$useState = React.useState([]),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    people = _React$useState2[0],\n    setPeople = _React$useState2[1];\n  React.useEffect(refreshPersonList, []);\n  function refreshPersonList() {\n    console.log(\"refresh person list\");\n    RoiGetPeople().then(function (data) {\n      setPeople(data);\n    }).catch(function (error) {\n      PopupOk(\"API Error\", \"Could not get people from the server\");\n    });\n  }\n  function showAddPerson() {\n    props.navigation.replace('Root', {\n      screen: 'AddPerson'\n    });\n  }\n  function displayPeople() {\n    displayConnectionMessage();\n    if (!people) return;\n    return people.map(function (p) {\n      var _p$department$name, _p$department;\n      return _jsxs(View, {\n        style: Styles.dataContainerHorizontal,\n        children: [_jsxs(View, {\n          style: Styles.personListItemDetails,\n          children: [_jsx(TextParagraph, {\n            style: Styles.personListItemName,\n            children: p.name\n          }), _jsx(TextParagraph, {\n            style: Styles.personListItemText,\n            children: (_p$department$name = (_p$department = p.department) == null ? void 0 : _p$department.name) != null ? _p$department$name : '---'\n          }), _jsx(TextParagraph, {\n            style: Styles.personListItemText,\n            children: p.phone\n          })]\n        }), _jsxs(ButtonContainer, {\n          direction: \"column\",\n          children: [_jsx(MyButton, {\n            text: \"info\",\n            type: \"major\",\n            size: \"small\",\n            onPress: function onPress() {\n              showViewPerson(p);\n            },\n            buttonStyle: Styles.personListItemButton,\n            textStyle: Styles.personListItemButtonText\n          }), _jsx(MyButton, {\n            text: \"Edit\",\n            type: \"default\",\n            size: \"small\",\n            onPress: function onPress() {\n              showEditPerson(p);\n            },\n            buttonStyle: Styles.personListItemButton,\n            textStyle: Styles.personListItemButtonText\n          }), _jsx(MyButton, {\n            text: \"Delete\",\n            type: \"minor\",\n            size: \"small\",\n            onPress: function onPress() {\n              return deletePerson(p);\n            },\n            buttonStyle: Styles.personListItemButton,\n            textStyle: Styles.personListItemButtonText\n          })]\n        })]\n      }, p.id);\n    });\n  }\n  return _jsxs(SafeAreaView, {\n    style: Styles.safeAreaView,\n    children: [_jsxs(View, {\n      style: Styles.personButtonContainer,\n      children: [_jsx(MyButton, {\n        text: \"+ Add new person\",\n        type: \"major\",\n        size: \"small\",\n        onPress: showAddPerson\n      }), _jsx(MyButton, {\n        text: \"Refresh\",\n        type: \"default\",\n        size: \"small\",\n        onPress: refreshPersonList\n      })]\n    }), _jsxs(ScrollView, {\n      style: Styles.container,\n      contentContainerStyle: Styles.contentContainer,\n      children: [_jsx(TextH1, {\n        style: {\n          marginTop: 0\n        },\n        children: \"Listing all people\"\n      }), _jsx(View, {\n        children: displayPeople()\n      })]\n    })]\n  });\n}","map":{"version":3,"names":["Settings","RoiDeletePerson","RoiGetPeople","PopupOk","PopupOkCancel","ButtonContainer","NetInfo","TextParagraph","TextH1","TextH2","Styles","MyButton","jsx","_jsx","jsxs","_jsxs","ViewPeopleScreen","props","_React$useState","React","useState","_React$useState2","_slicedToArray","people","setPeople","useEffect","refreshPersonList","console","log","then","data","catch","error","showAddPerson","navigation","replace","screen","displayPeople","displayConnectionMessage","map","p","_p$department$name","_p$department","View","style","dataContainerHorizontal","children","personListItemDetails","personListItemName","name","personListItemText","department","phone","direction","text","type","size","onPress","showViewPerson","buttonStyle","personListItemButton","textStyle","personListItemButtonText","showEditPerson","deletePerson","id","SafeAreaView","safeAreaView","personButtonContainer","ScrollView","container","contentContainerStyle","contentContainer","marginTop"],"sources":["C:/project/steftest1/screens/ViewPeopleScreen.js"],"sourcesContent":["// Import helper code\nimport Settings from '../constants/Settings';\nimport { RoiDeletePerson, RoiGetPeople } from '../utils/RoiApi';\nimport { PopupOk, PopupOkCancel } from '../utils/Popup';\nimport { ButtonContainer } from '../components/ButtonContainer';\nimport NetInfo from '@react-native-community/netinfo';\n\n// Import styling and components\nimport { TextParagraph, TextH1, TextH2 } from \"../components/StyledText\";\nimport Styles from \"../styles/MainStyle\";\nimport { MyButton } from '../components/MyButton';\n\n\nexport default function ViewPeopleScreen(props) {\n\n  // State - data for this component\n\n  // Data array, default to empty array\n  const [people, setPeople] = React.useState([])\n\n  // Set \"effect\" to retrieve and store data - only run on mount/unmount (loaded/unloaded)\n  // \"effectful\" code is something that triggers a UI re-render\n  React.useEffect(refreshPersonList, [])\n\n  // Refresh the person list data - call the API\n  function refreshPersonList() {\n\n    console.log(\"refresh person list\")\n\n    // Get data from the API\n    RoiGetPeople()\n      // Success\n      .then(data => {\n        // Store results in state variable\n        setPeople(data)\n      })\n      // Error\n      .catch(error => {\n        PopupOk(\"API Error\", \"Could not get people from the server\")\n      })\n\n  }\n\n  function showAddPerson() {\n    // Navigate to AddPerson and replace the current screen\n    props.navigation.replace('Root', { screen: 'AddPerson' });\n  }\n  \n  \n\n\n\n// Display all people data\nfunction displayPeople() {\n  // Display flash message when there's a connection issue\n  displayConnectionMessage();\n\n  // Cancel if no people to display\n  if (!people) return;\n\n  // Loop through each item and turn into appropriate output and then return the result\n  return people.map((p) => {\n    // Create an output view for each item\n    return (\n      <View key={p.id} style={Styles.dataContainerHorizontal}>\n        <View style={Styles.personListItemDetails}>\n          <TextParagraph style={Styles.personListItemName}>{p.name}</TextParagraph>\n          <TextParagraph style={Styles.personListItemText}>{p.department?.name ?? '---'}</TextParagraph>\n          <TextParagraph style={Styles.personListItemText}>{p.phone}</TextParagraph>\n        </View>\n        <ButtonContainer direction=\"column\">\n          {/* <View style={Styles.personListItemButtons}> */}\n          <MyButton\n            text=\"info\"\n            type=\"major\" // default*|major|minor\n            size=\"small\" // small|medium*|large\n            onPress={() => {\n              showViewPerson(p);\n            }}\n            buttonStyle={Styles.personListItemButton}\n            textStyle={Styles.personListItemButtonText}\n          />\n          <MyButton\n            text=\"Edit\"\n            type=\"default\" // default*|major|minor\n            size=\"small\" // small|medium*|large\n            onPress={() => {\n              showEditPerson(p);\n            }}\n            buttonStyle={Styles.personListItemButton}\n            textStyle={Styles.personListItemButtonText}\n          />\n          <MyButton\n            text=\"Delete\"\n            type=\"minor\" // default*|major|minor\n            size=\"small\" // small|medium*|large\n            onPress={() => deletePerson(p)}\n            buttonStyle={Styles.personListItemButton}\n            textStyle={Styles.personListItemButtonText}\n          />\n          {/* </View> */}\n        </ButtonContainer>\n      </View>\n    );\n  });\n}\n\n\n  // Main output of the screen component\n  return (\n    <SafeAreaView style={Styles.safeAreaView}>\n      \n      <View style={Styles.personButtonContainer}>\n        <MyButton \n          text=\"+ Add new person\"\n          type=\"major\"      // default*|major|minor\n          size=\"small\"      // small|medium*|large\n          onPress={showAddPerson}\n        />\n        <MyButton \n          text=\"Refresh\"\n          type=\"default\"    // default*|major|minor\n          size=\"small\"      // small|medium*|large\n          onPress={refreshPersonList}\n        />\n      </View>\n      \n      <ScrollView style={Styles.container} contentContainerStyle={Styles.contentContainer}>\n          \n        <TextH1 style={{marginTop:0}}>Listing all people</TextH1>\n\n        <View>\n          {displayPeople()}\n        </View>\n\n      </ScrollView>\n    </SafeAreaView>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}